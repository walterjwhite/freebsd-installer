#!/bin/sh

. _LIBRARY_PATH_/_APPLICATION_NAME_/setup/libraries/include
. _LIBRARY_PATH_/_APPLICATION_NAME_/setup/libraries/key-value

_ORIGINAL_IFS=$IFS
IFS=$'\n'

_MODULE=extract
_TYPE=d

_do_extract() {
	for _EXTRACT_FILE in $(find $1 -type f)
	do
		echo -e "###\n# Extracting $_EXTRACT_FILE"

		. $_EXTRACT_FILE

		local _extension=$(echo "$_SOURCE" | /usr/local/bin/grep -Po "\\.(tar\\.gz|tar\\.bz2|tbz2|tgz|zip|tar\\.xz)$")

		case $_extension in
			".tar.gz"|".tgz")
				tar zxf /tmp/downloads/$_SOURCE -C /tmp
				;;
			".zip")
				unzip /tmp/downloads/$_SOURCE -q -d /tmp
				;;
			".tar.bz2"|".tbz2")
				tar jxf /tmp/downloads/$_SOURCE -C /tmp
				;;
			".tar.xz")
				_TAR=$(echo -e $_SOURCE | sed -e "s/\\.xz$//")

				xz -dc  /tmp/downloads/$_SOURCE > /tmp/$_TAR
				tar xf /tmp/downloads/$_TAR -C /tmp
				;;
			*)
				echo -e "WARNING - extension unsupported - $_extension $_SOURCE $_EXTRACT_FILE"
				#exit 1
				;;
		esac

		# ensure target parent directory exists
		local _target_parent=$_ROOT/$(dirname $_TARGET)

		if [ -n "$_CLEAN" ]
		then
			rm -rf $_CLEAN
		fi

		if [ -z "$_CONTENTS" ]
		then
      		cp /tmp/downloads/$_SOURCE /tmp/$_SOURCE
			_CONTENTS=$_SOURCE
		fi

		mkdir -p $_target_parent
		mv /tmp/"$_CONTENTS" $_ROOT/$_TARGET

		ls -al $_ROOT/$_TARGET
		rm -rf /tmp/"$_CONTENTS"

		unset _SOURCE _CLEAN _TARGET _CONTENTS

		echo -e ""
	done
}

for _EXTRACT_PATH in $(_LIBRARY_PATH_/_APPLICATION_NAME_/find/patches\
  |xargs -L 1 -I _PATCH_ find _PATCH_ -type $_TYPE\
  |/usr/local/bin/grep -P "\\.patch/(${_MODULE}$|.*\\.${_MODULE}$)")
do
  _do_extract $_EXTRACT_PATH
	_HAS_RUN=1
done

IFS=$_ORIGINAL_IFS

_check_run
