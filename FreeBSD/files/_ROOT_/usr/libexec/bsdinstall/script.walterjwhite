#!/bin/sh
#
#
#
#
unset debug

if [ $_CONF_INSTALL_LOG_LEVEL -eq 0 ]; then
	set -x
fi

no_confirm=1
USE_DIALOG=0

BSDCFG_SHARE="/usr/share/bsdconfig"
. $BSDCFG_SHARE/common.subr || exit 1
f_dprintf "%s: loading includes..." "$0"
f_include $BSDCFG_SHARE/dialog.subr
f_include $BSDCFG_SHARE/variable.subr



#
#
: ${ZFSBOOT_POOL_NAME:=zroot}


: ${TMPDIR:="/tmp"}

#
#
msg_installation_error="Installation Error!"


error() {
	local file
	f_getvar "$VAR_DEBUG_FILE#+" file
	if [ "$file" ]; then
		f_dialog_title "$msg_installation_error"
		f_dialog_textbox "$file"
	fi

	[ -f "$PATH_FSTAB" ] || exit
	if [ "$ZFSBOOT_DISKS" ]; then
		zpool export $ZFSBOOT_POOL_NAME
	else
		bsdinstall umount
	fi

	exit 1
}


set -e
trap error EXIT

SCRIPT="$1"
shift

POST_INSTALL_SCRIPT="$1"
shift

f_dprintf "Began Installation at %s" "$(date)"
rm -rf $BSDINSTALL_TMPETC
mkdir $BSDINSTALL_TMPETC

resolvconf -u

. $SCRIPT

: ${DISTRIBUTIONS="kernel.txz base.txz"}
export DISTRIBUTIONS
export BSDINSTALL_DISTDIR

if [ "$BSDINSTALL_LOG" != "${debugFile#+}" ]; then
	export debugFile="$BSDINSTALL_LOG"
	f_quietly f_debug_init
	f_dprintf "Began Instalation at %s" "$(date)"
fi

rm -f $PATH_FSTAB
touch $PATH_FSTAB
if [ "$ZFSBOOT_DISKS" ]; then
	bsdinstall zfsboot.walterjwhite
else
	bsdinstall scriptedpart "$PARTITIONS"
fi

bsdinstall mount

exec 3>&1
export BSDINSTALL_DISTDIR=$($(dirname $0)/fetchmissingdists 2>&1 1>&3)
FETCH_RESULT=$?
exec 3>&-

[ $FETCH_RESULT -ne 0 ] && error "Could not fetch remote distributions"

bsdinstall checksum
if [ -t 0 ]; then
	bsdinstall distextract
else
	for set in $DISTRIBUTIONS; do
		f_dprintf "Extracting $BSDINSTALL_DISTDIR/$set"
		#
		tar -xf "$BSDINSTALL_DISTDIR/$set" -C $BSDINSTALL_CHROOT --exclude boot/efi
		mkdir -p $BSDINSTALL_CHROOT/boot/efi
	done
fi

tar cpf - $_CONF_INSTALL_LIBRARY_PATH | tar xpf - -C $BSDINSTALL_CHROOT
mkdir -p ${BSDINSTALL_CHROOT}${_CONF_INSTALL_BIN_PATH}

for _app in $(find $_CONF_INSTALL_LIBRARY_PATH -maxdepth 2 -type f -name '.files'); do
	while read _FILE; do
		tar cpf - $_FILE | tar xpf - -C $BSDINSTALL_CHROOT
	done <$_app
done

unset _app

cp $_CONF_INSTALL_BIN_PATH/app-install ${BSDINSTALL_CHROOT}${_CONF_INSTALL_BIN_PATH}

mkdir -p $BSDINSTALL_CHROOT/root/.config/walterjwhite
cp /root/.config/walterjwhite/* $BSDINSTALL_CHROOT/root/.config/walterjwhite

$_CONF_INSTALL_GNU_SED -i '/_BOOTSTRAP_/d' $BSDINSTALL_CHROOT/$_CONF_INSTALL_LIBRARY_PATH/install/.metadata

mkdir -p $BSDINSTALL_CHROOT/tmp/HOST-SSH
cp $_SSH_KEY $_SSH_KEY.pub $BSDINSTALL_CHROOT/tmp/HOST-SSH

bsdinstall bootconfig

bsdinstall config

if [ ! -f $BSDINSTALL_CHROOT/etc/resolv.conf -a -f /etc/resolv.conf ]; then
	cp /etc/resolv.conf $BSDINSTALL_CHROOT/etc/resolv.conf
fi

if [ -f $POST_INSTALL_SCRIPT ]; then
	cp $POST_INSTALL_SCRIPT $BSDINSTALL_CHROOT/tmp/installscript
	chmod a+x $BSDINSTALL_CHROOT/tmp/installscript
	mount -t devfs devfs "$BSDINSTALL_CHROOT/dev"
	chroot $BSDINSTALL_CHROOT /tmp/installscript $@ 2>&1
	umount "$BSDINSTALL_CHROOT/dev"
	rm $BSDINSTALL_CHROOT/tmp/installscript
fi

bsdinstall entropy
bsdinstall umount
if [ "$ZFSBOOT_DISKS" ]; then
	zpool export $ZFSBOOT_POOL_NAME
fi

f_dprintf "Installation Completed at %s" "$(date)"

trap - EXIT
exit $SUCCESS

